name: CI

concurrency: Production
on:
  push:
    branches: [main]
    paths:
      - ".github/workflows/ci.yaml"
      - "BalanceNotifier/**"
      - "terraform/**"

  pull_request:
    branches: [main]
    paths:
      - ".github/workflows/ci.yaml"
      - "BalanceNotifier/**"
      - "terraform/**"

  workflow_dispatch:

jobs:
  checkov-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Checkov Scan
        uses: bridgecrewio/checkov-action@master

  tfsec-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: TFSec Scan
        run: docker run --interactive --volume "$(pwd):/src" --rm aquasec/tfsec-scratch /src

  terraform:
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      TF_VAR_plaid_client_id: ${{ secrets.TF_VAR_PLAID_CLIENT_ID }}
      TF_VAR_plaid_client_secret: ${{ secrets.TF_VAR_PLAID_CLIENT_SECRET }}
      TF_VAR_plaid_client_access_token: ${{ secrets.TF_VAR_PLAID_CLIENT_ACCESS_TOKEN }}

      TF_VAR_twilio_account_sid: ${{ secrets.TF_VAR_TWILIO_ACCOUNT_SID }}
      TF_VAR_twilio_api_key_sid: ${{ secrets.TF_VAR_TWILIO_API_KEY_SID }}
      TF_VAR_twilio_api_key_secret: ${{ secrets.TF_VAR_TWILIO_API_KEY_SECRET }}
      TF_VAR_twilio_sender_phone_number: ${{ secrets.TF_VAR_TWILIO_SENDER_PHONE_NUMBER }}
      TF_VAR_twilio_recipient_phone_number: ${{ secrets.TF_VAR_TWILIO_RECIPIENT_PHONE_NUMBER }}

    environment: Production
    needs:
      - checkov-scan
      - tfsec-scan
    
    outputs:
      LINUX_FUNCTION_APP_NAME: ${{ steps.tf-output.outputs.LINUX_FUNCTION_APP_NAME }}
      RESOURCE_GROUP_NAME: ${{ steps.tf-output.outputs.RESOURCE_GROUP_NAME }}

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Terraform Format
        run: terraform fmt -check -recursive
        working-directory: terraform

      - name: Terraform Initialize
        run: terraform init
        working-directory: terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform

      - name: Terraform Plan
        run: terraform plan -input=false -out plan
        working-directory: terraform

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -input=false -auto-approve "plan"
        working-directory: terraform

      - name: Set Terraform Outputs
        id: tf-output
        run: |
          echo "::set-output name=LINUX_FUNCTION_APP_NAME::$(terraform output -raw linux_function_app_name)"
          echo "::set-output name=RESOURCE_GROUP_NAME::$(terraform output -raw resource_group_name)"
        working-directory: terraform

  deploy:
    environment: Production
    needs: terraform
    permissions:
      id-token: write

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'

      - name: Setup Azure Function Core Tools
        run: npm install --global azure-functions-core-tools@4 --unsafe-perm true

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}

      - name: Deploy Azure Function App
        run: func azure functionapp publish ${{ needs.terraform.outputs.LINUX_FUNCTION_APP_NAME }} --csharp
        working-directory: BalanceNotifier

      - name: Restart Azure Function App
        run: |
          az functionapp stop --name ${{ needs.terraform.outputs.LINUX_FUNCTION_APP_NAME }} \
                              --resource-group ${{ needs.terraform.outputs.RESOURCE_GROUP_NAME }}

          az functionapp start --name ${{ needs.terraform.outputs.LINUX_FUNCTION_APP_NAME }} \
                               --resource-group ${{ needs.terraform.outputs.RESOURCE_GROUP_NAME }}
